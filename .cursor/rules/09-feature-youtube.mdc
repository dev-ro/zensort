---
description: Enforces architectural patterns for the YouTube integration feature, including the denormalized data model, data sync logic, and repository structure.
globs:
  - "lib/features/youtube*/**/*.dart"
  - "lib/features/auth*/**/*.dart"
alwaysApply: false
---
# YouTube & Auth Feature Architecture

This rule governs the implementation of user authentication and YouTube data handling. It builds upon the foundational principles in `00-core-standards.mdc` and the clean architecture defined in `01-architecture.mdc`.

## 1. Clean Architecture Adherence (Unchanged)

This feature **MUST** strictly follow the project's Feature-First architecture. All code must be placed in the appropriate layer within `lib/features/youtube/` or `lib/features/auth/`.

- [cite_start]**Presentation Layer (`/presentation`):** **MUST NOT** interact directly with Firebase or the YouTube API[cite: 13].
- **Domain Layer (`/domain`):** Contains pure Dart business objects and abstract Repository interfaces. [cite_start]**MUST NOT** have dependencies on Flutter or Firebase[cite: 5].
- [cite_start]**Data Layer (`/data`):** Contains repository implementations and handles all interactions with external data sources[cite: 7].

## 2. Data Sync & Caching Strategy (Updated Logic)

[cite_start]To manage API quotas and minimize cloud costs, a robust sync strategy is mandatory[cite: 32]. The repository **MUST NOT** simply cache raw API responses. It must process them and store them in the normalized structure defined in Section 4.

- **Repository Logic:** The `YouTubeRepositoryImpl` must implement the sync logic as follows:
    1. Fetch the user's liked videos from the YouTube Data API `playlistItems` endpoint.
    2. For each video item returned by the API:
        a.  Check if a document for the video already exists in the root `/videos/{videoId}` collection to prevent redundant writes[cite: 35]. If it does not exist, create it using the video's metadata.
        b.  Create or update the linking document in the user's `/users/{userId}/likedVideoLinks/{videoId}` subcollection. This document stores the user-specific timestamps.

## 3. Authentication (Unchanged)

- The authentication flow must be handled within its own `auth` feature.
- The `AuthRepository` is responsible for the `signInWithGoogle` flow and providing an auth state stream.

## 4. Firestore Data Model (New Section)

The data model is split into two collections to avoid data duplication and allow for future enrichment (e.g., embeddings).

- **Root Videos Collection:** A single source of truth for all video metadata.
  - **Path:** `/videos/{videoId}`
  - **Document Fields:**
    - `title` (String)
    - `description` (String)
    - `channelName` (String)
    - `publishedAt` (Timestamp): The original video publication date from YouTube.
    - `maxResThumbnailUrl` (String): The URL for the maximum resolution thumbnail available.

- **User's Liked Video Links:** A subcollection linking a user to videos they've liked.
  - **Path:** `/users/{userId}/likedVideoLinks/{videoId}`
  - **Document Fields:**
    - `likedAt` (Timestamp): This timestamp comes from the `publishedAt` field of the `PlaylistItem` resource from the YouTube API, which represents when the user liked the video.
    - `syncedAt` (Timestamp): A `FieldValue.serverTimestamp()` set when the record is written to Firestore by the application.

## 5. Google Sign-in for Web

- **Mandatory Web Client ID:** The `google_sign_in` package requires an explicit OAuth `clientId` to function correctly on the web platform. When instantiating the `GoogleSignIn` class in the `AuthRepositoryImpl`, you **MUST** provide the `clientId` parameter.
- **Source of Truth:** The correct Web Client ID is stored in a `<meta>` tag within `@web/index.html`. This value must be copied exactly.
- **Forbidden Pattern:** An implementation that instantiates `GoogleSignIn` for a web target without the `clientId` is considered a critical bug.
