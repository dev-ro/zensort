---
description: Defines git best practices for commits and merging feature branches safely into main.
globs: []
alwaysApply: true
---
# Git Workflow: Commit Standards and Branch Management

## Commit Standards

### MANDATORY: Commit After Every Tested Change

- **ALWAYS commit immediately after every tested and successful update**
- Never accumulate multiple changes in a single commit
- Each commit should represent one logical, complete, and tested change

### Commit Message Format

Follow conventional commit standards with this exact format:

```txt
<type>(<scope>): <description>

[optional body]

[optional footer(s)]
```

### Required Types

- **feat**: New feature or functionality
- **fix**: Bug fixes
- **docs**: Documentation changes
- **style**: Code style changes (formatting, missing semi-colons, etc)
- **refactor**: Code changes that neither fix bugs nor add features
- **perf**: Performance improvements
- **test**: Adding or updating tests
- **chore**: Build process, dependency updates, tooling changes
- **ci**: Continuous integration changes

### Commit Message Rules

- **NO emojis** in commit messages
- Use imperative mood: "add feature" not "added feature"
- Keep subject line under 72 characters
- Capitalize first letter of description
- No period at end of subject line
- Use body to explain what and why, not how

### Examples of Good Commits

```txt
feat(auth): Add Google OAuth integration

refactor(youtube): Extract video categorization logic into separate function

fix(sync): Correct field mapping between frontend and backend schemas

docs(readme): Update installation instructions for Firebase setup

test(youtube): Add unit tests for sync progress tracking
```

### Examples of Bad Commits

```txt
‚ùå üöÄ Added cool new feature!
‚ùå fixes stuff
‚ùå WIP
‚ùå Updated files
‚ùå feat: added some changes and also fixed a bug and updated docs
```

## Branch Workflow: Merging a Feature Branch

When instructed to "merge a feature branch", you MUST follow this exact sequence of commands to ensure a safe and clean merge.

## 1. Prepare the `main` Branch

- **Switch to `main`:**
  `git checkout main`
- **Pull Latest Changes:** Ensure `main` is up-to-date with the remote repository.
  `git pull origin main`

## 2. Merge the Feature Branch

- **Merge with a Merge Commit:** Use the `--no-ff` flag to create a merge commit, which preserves the history of the feature as a distinct unit of work. Replace `<branch-name>` with the actual feature branch name.
  `git merge --no-ff <branch-name>`

## 3. Push the Changes

- **Push `main`:** Push the newly merged `main` branch to the remote.
  `git push origin main`

## 4. Clean Up

- **Delete Local Branch:** After a successful merge, delete the local copy of the feature branch.
  `git branch -d <branch-name>`
- **Delete Remote Branch:** Delete the remote feature branch to keep the repository tidy.
  `git push origin --delete <branch-name>`
