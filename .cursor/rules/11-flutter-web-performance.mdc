---
description: Flutter Web Performance & State Persistence
alwaysApply: false
---
# Flutter Web Performance & State Persistence

ZenSort is a web-first application. All development must prioritize web performance, state persistence across browser refreshes, and web-specific optimization techniques.

## 1. State Persistence with hydrated_bloc

### 1.1 Mandatory State Persistence

Browser refreshes completely restart the Flutter app, losing all in-memory state. You MUST implement state persistence for any state that should survive page reloads.

**Use hydrated_bloc for:**
- Theme preferences (dark/light mode)
- Language selection  
- UI preferences (selected tabs, form data)
- Non-sensitive user interface state

**NEVER persist sensitive data:**
- Authentication tokens (JWTs)
- Personally Identifiable Information (PII)
- API keys or credentials
- Financial or health information

### 1.2 Implementation Requirements

**Web-Specific Initialization:**
```dart
// main.dart - MANDATORY web-aware setup
import 'package:flutter/foundation.dart' show kIsWeb;
import 'package:hydrated_bloc/hydrated_bloc.dart';
import 'package:path_provider/path_provider.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  final storage = await HydratedStorage.build(
    storageDirectory: kIsWeb
        ? HydratedStorageDirectory.web // Uses IndexedDB on web
        : await getApplicationDocumentsDirectory(),
  );

  HydratedBloc.storage = storage;
  runApp(const MyApp());
}
```

**BLoC Implementation Pattern:**
```dart
class ThemeCubit extends HydratedCubit<Brightness> {
  ThemeCubit() : super(Brightness.light);

  void toggleTheme() {
    emit(state == Brightness.light ? Brightness.dark : Brightness.light);
  }

  @override
  Brightness? fromJson(Map<String, dynamic> json) {
    try {
      return Brightness.values[json['brightness'] as int];
    } catch (_) {
      return null; // Use default state on deserialization failure
    }
  }

  @override
  Map<String, dynamic>? toJson(Brightness state) {
    return {'brightness': state.index};
  }
}
```

### 1.3 Security Requirements

**Authentication Tokens MUST use HttpOnly Cookies:**
- Server-set HttpOnly cookies prevent XSS token theft
- Never store JWTs in hydrated_bloc or browser storage
- Authentication state is derived from API call success/failure, not stored tokens

## 2. Performance Optimization

### 2.1 Code Splitting and Bundle Optimization

**Mandatory Deferred Loading:**
```dart
// Use deferred imports for non-critical features
import 'package:zensort/features/analytics/analytics.dart' deferred as analytics;

// Load on demand
void showAnalytics() async {
  await analytics.loadLibrary();
  analytics.showAnalyticsPage();
}
```

**Asset Optimization:**
- Use WebP format for all images where supported
- Implement responsive images with different resolutions
- Compress all static assets
- Use CDN for asset delivery in production

### 2.2 Widget Performance

**Loading Indicators:**
```dart
// MANDATORY: Use custom animated zensort_logo.svg for all loading states
// NEVER use generic CircularProgressIndicator
class ZenSortLoader extends StatelessWidget {
  final double size;
  
  const ZenSortLoader({super.key, this.size = 40.0});
  
  @override
  Widget build(BuildContext context) {
    return SizedBox(
      width: size,
      height: size,
      child: SvgPicture.asset(
        'assets/images/zensort_logo.svg',
        // Add rotation animation
      ),
    );
  }
}
```

**Efficient List Building:**
```dart
// Use ListView.builder with itemExtent for better performance
ListView.builder(
  itemCount: items.length,
  itemExtent: 60.0, // Helps with scroll performance
  itemBuilder: (context, index) => ItemWidget(items[index]),
)
```

### 2.3 State Serialization Performance

**Optimization Guidelines:**
- Keep state objects lean and flat
- Avoid persisting large, raw datasets
- Persist only identifiers needed to re-fetch data
- Profile serialization performance using Flutter DevTools

```dart
// ✅ GOOD: Lean state object
class UserPreferencesState {
  final String selectedTheme;
  final String selectedLanguage;
  final int lastSelectedTabIndex;
}

// ❌ BAD: Heavy state object
class AppState {
  final List<Video> allVideos; // Don't persist large datasets
  final Map<String, dynamic> rawApiResponse; // Don't persist raw responses
}
```

## 3. Web-Specific Architecture

### 3.1 Platform Detection

```dart
import 'package:flutter/foundation.dart' show kIsWeb;

// Use platform-aware initialization
void initializeApp() {
  if (kIsWeb) {
    // Web-specific initialization
    _setupWebFeatures();
  } else {
    // Mobile-specific initialization
    _setupMobileFeatures();
  }
}
```

### 3.2 Responsive Design

**Mandatory Responsive Patterns:**
```dart
// Use LayoutBuilder for responsive layouts
LayoutBuilder(
  builder: (context, constraints) {
    if (constraints.maxWidth > 1200) {
      return DesktopLayout();
    } else if (constraints.maxWidth > 800) {
      return TabletLayout();
    } else {
      return MobileLayout();
    }
  },
)
```

### 3.3 Navigation and URLs

**Use go_router for clean URLs:**
```dart
// Clean, bookmarkable URLs
final router = GoRouter(
  routes: [
    GoRoute(
      path: '/videos',
      builder: (context, state) => VideosPage(),
    ),
    GoRoute(
      path: '/settings',
      builder: (context, state) => SettingsPage(),
    ),
  ],
);
```

## 4. Browser Storage Architecture

### 4.1 Storage Layer Understanding

hydrated_bloc uses this storage chain:
1. **Application Layer:** HydratedBloc/HydratedCubit
2. **Storage Interface:** Generic Storage interface
3. **Implementation:** HydratedStorage (built on hive_ce)
4. **Browser API:** IndexedDB (via Hive web adapter)

### 4.2 Storage Capacity and Performance

**IndexedDB Advantages over localStorage:**
- Asynchronous operations (no UI blocking)
- Large storage capacity (hundreds of MB vs 5MB)
- Native support for complex data types
- Better performance for large datasets
- Structured clone algorithm support

### 4.3 Error Handling

**Robust Deserialization:**
```dart
@override
MyState? fromJson(Map<String, dynamic> json) {
  try {
    return MyState.fromJson(json);
  } catch (error, stackTrace) {
    // Log error for debugging
    developer.log(
      'Failed to deserialize state',
      error: error,
      stackTrace: stackTrace,
    );
    // Return null to use default state
    return null;
  }
}
```

## 5. Performance Monitoring

### 5.1 Core Web Vitals

Monitor and optimize:
- **Largest Contentful Paint (LCP):** < 2.5 seconds
- **First Input Delay (FID):** < 100 milliseconds  
- **Cumulative Layout Shift (CLS):** < 0.1

### 5.2 Profiling Requirements

**Use Flutter DevTools in profile mode:**
```bash
flutter run --profile --web-hostname localhost --web-port 7357
```

**Profile serialization overhead:**
- Measure toJson/fromJson execution time
- Identify heavy state objects
- Optimize or reduce state complexity

### 5.3 Bundle Analysis

**Regular bundle size monitoring:**
```bash
flutter build web --analyze-size
```

Monitor for:
- Unnecessary dependencies
- Large asset files
- Unoptimized code paths

## 6. Memory Management

### 6.1 Stream Subscriptions

```dart
class WebAwareBloc extends HydratedBloc<Event, State> {
  late final StreamSubscription _subscription;
  
  WebAwareBloc() : super(InitialState()) {
    _subscription = someStream.listen(handleData);
  }
  
  @override
  Future<void> close() {
    _subscription.cancel(); // MANDATORY: Prevent memory leaks
    return super.close();
  }
}
```

### 6.2 Controller Lifecycle

```dart
class ResponsiveWidget extends StatefulWidget {
  @override
  _ResponsiveWidgetState createState() => _ResponsiveWidgetState();
}

class _ResponsiveWidgetState extends State<ResponsiveWidget>
    with TickerProviderStateMixin {
  late AnimationController _controller;
  
  @override
  void initState() {
    super.initState();
    _controller = AnimationController(vsync: this);
  }
  
  @override
  void dispose() {
    _controller.dispose(); // MANDATORY: Prevent memory leaks
    super.dispose();
  }
}
```

For detailed implementation patterns and architectural guidance, refer to:
- `docs/BLoC/Flutter Web BLoC State Persistence_.txt`
- `docs/Agent Guide - SEO for Flutter Web Apps.md`
