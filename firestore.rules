rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Target the 'waitlist' collection specifically.
    match /waitlist/{docId} {
      // Allow anyone to create a new document in the collection.
      allow create: if true;

      // Deny all reads, updates, and deletes to protect user privacy.
      allow read, update, delete: if false;
    }
    
    // Videos collection with embedding support
    match /videos/{videoId} {
      // Allow authenticated users to read video data
      allow read: if request.auth != null;
      
      // Allow authenticated users to write video data, but restrict embedding fields
      allow write: if request.auth != null 
        && request.auth.uid == resource.data.ownerId
        && validateVideoData(request.resource.data);
    }
    
    // User's liked videos subcollection
    match /users/{userId}/likedVideos/{videoId} {
      allow read, write: if request.auth != null 
        && request.auth.uid == userId;
    }
    
    // User's sync jobs subcollection
    match /users/{userId}/syncJobs/{jobId} {
      allow read, write: if request.auth != null 
        && request.auth.uid == userId;
    }
  }
}

function validateVideoData(data) {
  // Validate core video fields
  let hasRequiredFields = data.keys().hasAll(['title', 'channelTitle', 'publishedAt']);
  let validTypes = data.title is string 
    && data.title.size() <= 1000
    && data.channelTitle is string;
  
  // Embedding fields are read-only for clients (only Cloud Functions can write them)
  let noEmbeddingFieldsInClientWrite = !data.keys().hasAny(['embedding', 'embedding_status', 'embedding_generated_at', 'embedding_updated_at', 'embedding_error']);
  
  return hasRequiredFields && validTypes && noEmbeddingFieldsInClientWrite;
}